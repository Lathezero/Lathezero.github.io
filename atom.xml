<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lathezero&#39;s Blog</title>
  
  <subtitle>记录学习与生活</subtitle>
  <link href="https://lathezero.github.io/atom.xml" rel="self"/>
  
  <link href="https://lathezero.github.io/"/>
  <updated>2025-01-05T13:36:25.569Z</updated>
  <id>https://lathezero.github.io/</id>
  
  <author>
    <name>雷德基洛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CosyVoiceDeploy</title>
    <link href="https://lathezero.github.io/2025/01/05/2025/CosyVoiceDeploy/"/>
    <id>https://lathezero.github.io/2025/01/05/2025/CosyVoiceDeploy/</id>
    <published>2025-01-05T13:30:13.000Z</published>
    <updated>2025-01-05T13:36:25.569Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -y-c conda-forge pynini==2.1.5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -y -c conda-forge pynini==2.1.5</span><br></pre></td></tr></table></figure><p>CosyVoice 是阿里通义实验室开源的多语言语音合成模型，支持音色克隆、情感控制和跨语种语音合成等功能。以下是一个详细的本地部署教程，帮助你在本地部署并使用 CosyVoice 模型。</p><hr><h2 id="本地部署-CosyVoice-的步骤"><a href="#本地部署-CosyVoice-的步骤" class="headerlink" title="本地部署 CosyVoice 的步骤"></a><strong>本地部署 CosyVoice 的步骤</strong></h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a><strong>1. 环境准备</strong></h3><ul><li><strong>硬件要求</strong>：<ul><li>NVIDIA 显卡，建议显存 6GB 以上。</li><li>确保系统路径和文件名不含中文或空格。</li></ul></li><li><strong>软件依赖</strong>：<ul><li><strong>CUDA 和 cuDNN</strong>：用于 GPU 加速。检查并安装与显卡兼容的 CUDA 版本（建议 CUDA 12.x）和对应的 cuDNN 版本。</li><li><strong>Git</strong>：用于克隆代码仓库。</li><li><strong>Miniconda</strong>：用于创建 Python 虚拟环境。</li></ul></li></ul><hr><h3 id="2-克隆代码仓库"><a href="#2-克隆代码仓库" class="headerlink" title="2. 克隆代码仓库"></a><strong>2. 克隆代码仓库</strong></h3><ol><li><p>打开命令行窗口，执行以下命令克隆 CosyVoice 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/FunAudioLLM/CosyVoice.git</span><br><span class="line"><span class="built_in">cd</span> CosyVoice</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><ul><li>如果克隆失败，可以尝试多次或使用代理。</li></ul></li></ol><hr><h3 id="3-创建虚拟环境"><a href="#3-创建虚拟环境" class="headerlink" title="3. 创建虚拟环境"></a><strong>3. 创建虚拟环境</strong></h3><ol><li><p>使用 Miniconda 创建虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n cosyvoice python=3.8</span><br><span class="line">conda activate cosyvoice</span><br></pre></td></tr></table></figure></li><li><p>安装依赖库：</p><ul><li><p>修改 <code>requirements.txt</code> 文件，将 <code>onnxruntime-gpu</code> 替换为 <code>onnxruntime</code>。</p></li><li><p>使用国内镜像加速安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>torch</code> 安装过慢，可以手动下载并安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch-2.0.1+cu118-cp38-cp38-win_amd64.whl -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="4-下载模型"><a href="#4-下载模型" class="headerlink" title="4. 下载模型"></a><strong>4. 下载模型</strong></h3><ol><li><p>使用 ModelScope 下载预训练模型：</p><ul><li><p>创建一个 Python 脚本 <code>download_models.py</code>，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line">snapshot_download(<span class="string">&#x27;iic/CosyVoice-300M&#x27;</span>, local_dir=<span class="string">&#x27;pretrained_models/CosyVoice-300M&#x27;</span>)</span><br><span class="line">snapshot_download(<span class="string">&#x27;iic/CosyVoice-300M-SFT&#x27;</span>, local_dir=<span class="string">&#x27;pretrained_models/CosyVoice-300M-SFT&#x27;</span>)</span><br><span class="line">snapshot_download(<span class="string">&#x27;iic/CosyVoice-300M-Instruct&#x27;</span>, local_dir=<span class="string">&#x27;pretrained_models/CosyVoice-300M-Instruct&#x27;</span>)</span><br><span class="line">snapshot_download(<span class="string">&#x27;iic/CosyVoice-ttsfrd&#x27;</span>, local_dir=<span class="string">&#x27;pretrained_models/CosyVoice-ttsfrd&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python download_models.py</span><br></pre></td></tr></table></figure></li><li><p>如果下载速度慢，可以从百度网盘或夸克网盘下载模型并解压到 <code>pretrained_models</code> 目录。</p></li></ul></li></ol><hr><h3 id="5-启动模型"><a href="#5-启动模型" class="headerlink" title="5. 启动模型"></a><strong>5. 启动模型</strong></h3><ol><li><p><strong>内置音色生成</strong>：</p><ul><li><p>在命令行中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate cosyvoice</span><br><span class="line">python webui.py --port 50000 --model_dir pretrained_models/CosyVoice-300M-SFT</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器访问 <code>http://127.0.0.1:50000</code> 使用 Web 界面。</p></li></ul></li><li><p><strong>音色克隆</strong>：</p><ul><li><p>准备一段 3~10 秒的音频作为音色样本。</p></li><li><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webui.py --port 50001 --model_dir pretrained_models/CosyVoice-300M</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>语气微调</strong>：</p><ul><li><p>使用 <code>CosyVoice-300M-Instruct</code> 模型，支持富文本输入（如 <code>&lt;strong&gt;</code> 强调语气）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webui.py --port 50002 --model_dir pretrained_models/CosyVoice-300M-Instruct</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="6-常见问题"><a href="#6-常见问题" class="headerlink" title="6. 常见问题"></a><strong>6. 常见问题</strong></h3><ul><li><p><strong>SSLError 或 HTTPSConnectionError</strong>：设置代理端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:你的代理端口地址 &amp; <span class="built_in">set</span> https_proxy=http://127.0.0.1:你的代理端口地址</span><br></pre></td></tr></table></figure></li><li><p><strong>模型下载失败</strong>：更新 <code>modelscope</code> 到最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install modelscope==1.17.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="7-进阶功能"><a href="#7-进阶功能" class="headerlink" title="7. 进阶功能"></a><strong>7. 进阶功能</strong></h3><ul><li><strong>跨语种语音合成</strong>：输入中文语音，输出其他语言的语音。</li><li><strong>情感控制</strong>：通过富文本标签（如 <code>&lt;laughter&gt;</code>）控制语音情感。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>通过以上步骤，你可以在本地成功部署并使用 CosyVoice 模型。如果需要更详细的教程或遇到问题，可以参考相关文档或视频教程。</p><p>根据搜索结果，以下是 <strong>CosyVoice</strong> 系列模型的详细解释和适用场景：</p><hr><h2 id="1-CosyVoice-300M"><a href="#1-CosyVoice-300M" class="headerlink" title="1. CosyVoice-300M"></a><strong>1. CosyVoice-300M</strong></h2><ul><li><strong>功能</strong>：这是 CosyVoice 的基座模型，支持 <strong>零样本音色克隆</strong> 和 <strong>跨语言语音合成</strong>。</li><li><strong>特点</strong>：<ul><li>仅需 3~10 秒的音频样本，即可生成与目标音色高度相似的语音，包括韵律、情感等细节。</li><li>支持多语言（如中文、英文、日语、粤语、韩语）的语音合成。</li></ul></li><li><strong>适用场景</strong>：<ul><li>音色克隆：适用于需要快速复刻特定音色的场景，如虚拟助手、有声读物等。</li><li>跨语言语音合成：输入一种语言的语音，输出另一种语言的语音，同时保留原始音色。</li></ul></li></ul><hr><h2 id="2-CosyVoice-300M-SFT"><a href="#2-CosyVoice-300M-SFT" class="headerlink" title="2. CosyVoice-300M-SFT"></a><strong>2. CosyVoice-300M-SFT</strong></h2><ul><li><strong>功能</strong>：这是经过 <strong>SFT（Supervised Fine-Tuning）微调</strong> 的模型，内置了多个预训练音色。</li><li><strong>特点</strong>：<ul><li>支持多种预定义音色（如中文女声、中文男声、日语男声、粤语女声等）。</li><li>在特定任务或领域的语音生成质量上表现更优。</li></ul></li><li><strong>适用场景</strong>：<ul><li>内置音色生成：适用于需要快速生成高质量语音的场景，如语音客服、语音播报等。</li><li>多语言支持：支持多种语言的语音合成，适合国际化应用。</li></ul></li></ul><hr><h2 id="3-CosyVoice-300M-Instruct"><a href="#3-CosyVoice-300M-Instruct" class="headerlink" title="3. CosyVoice-300M-Instruct"></a><strong>3. CosyVoice-300M-Instruct</strong></h2><ul><li><strong>功能</strong>：这是支持 <strong>细粒度控制</strong> 的模型，允许通过自然语言指令或富文本标签控制语音生成。</li><li><strong>特点</strong>：<ul><li>支持情感、口音、角色风格等细粒度控制。</li><li>内置丰富的指令集，如 <code>&lt;laughter&gt;</code>（笑声）、<code>&lt;strong&gt;</code>（强调）、<code>[breath]</code>（呼吸声）等。</li><li>支持多语言和方言控制（如四川话）。</li></ul></li><li><strong>适用场景</strong>：<ul><li>情感语音生成：适用于需要表达特定情感的语音合成，如影视配音、游戏角色语音等。</li><li>指令控制：适合需要动态调整语音风格和情感的场景，如虚拟助手、互动播客等。</li></ul></li></ul><hr><h2 id="4-CosyVoice-ttsfrd"><a href="#4-CosyVoice-ttsfrd" class="headerlink" title="4. CosyVoice-ttsfrd"></a><strong>4. CosyVoice-ttsfrd</strong></h2><ul><li><strong>功能</strong>：这是 CosyVoice 的 <strong>文本规范化工具</strong>，用于优化文本到语音的转换效果。</li><li><strong>特点</strong>：<ul><li>提供更好的文本归一化性能，支持多语言文本处理。</li><li>可选的安装包，默认使用 WeTextProcessing 作为替代。</li></ul></li><li><strong>适用场景</strong>：<ul><li>文本预处理：适用于需要高质量文本到语音转换的场景，如语音合成系统的前端处理。</li></ul></li></ul><hr><h2 id="5-CosyVoice2-0-5B"><a href="#5-CosyVoice2-0-5B" class="headerlink" title="5. CosyVoice2-0.5B"></a><strong>5. CosyVoice2-0.5B</strong></h2><ul><li><strong>功能</strong>：这是 CosyVoice 的升级版本，支持 <strong>流式语音合成</strong> 和 <strong>更高质量的语音生成</strong>。</li><li><strong>特点</strong>：<ul><li>超低延迟：首包合成延迟可低至 150ms，适合实时应用。</li><li>高准确度：在发音错误率上比 CosyVoice 1.0 下降 30%~50%。</li><li>支持双向流式语音合成，适用于实时语音交互场景。</li></ul></li><li><strong>适用场景</strong>：<ul><li>实时语音合成：适用于需要低延迟语音生成的场景，如语音聊天、实时翻译等。</li><li>高质量语音生成：适合对语音质量要求较高的应用，如影视配音、广告语音等。</li></ul></li></ul><hr><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li><strong>CosyVoice-300M</strong>：适合音色克隆和跨语言语音合成。</li><li><strong>CosyVoice-300M-SFT</strong>：适合内置音色生成和多语言语音合成。</li><li><strong>CosyVoice-300M-Instruct</strong>：适合细粒度控制和情感语音生成。</li><li><strong>CosyVoice-ttsfrd</strong>：适合文本规范化处理。</li><li><strong>CosyVoice2-0.5B</strong>：适合实时语音合成和高质量语音生成。</li></ul><p>如果需要更详细的技术细节或部署方法，可以参考相关文档或视频教程。</p>]]></content>
    
    
    <summary type="html">CosyVoice 本地部署教程</summary>
    
    
    
    <category term="模型部署" scheme="https://lathezero.github.io/categories/%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
    
    <category term="语音合成" scheme="https://lathezero.github.io/categories/%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/"/>
    
    
    <category term="模型部署" scheme="https://lathezero.github.io/tags/%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
    
    <category term="语音合成" scheme="https://lathezero.github.io/tags/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>分层与解耦</title>
    <link href="https://lathezero.github.io/2025/01/02/2025/ThreeTierSchema/"/>
    <id>https://lathezero.github.io/2025/01/02/2025/ThreeTierSchema/</id>
    <published>2025-01-02T10:54:04.000Z</published>
    <updated>2025-01-02T11:51:23.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web开发中的分层解耦"><a href="#web开发中的分层解耦" class="headerlink" title="web开发中的分层解耦"></a>web开发中的分层解耦</h1><h2 id="三层架构与解耦"><a href="#三层架构与解耦" class="headerlink" title="三层架构与解耦"></a>三层架构与解耦</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ol><li>接收请求、响应数据Controller</li><li>逻辑处理 Server</li><li>数据访问 Dao</li></ol><p>耦合: 衡量软件中各个层&#x2F;各个模块的依赖关联程度。</p><p>内聚: 软件中各个功能模块内部的功能联系。</p><p>软件设计原则: 高内聚低耦合。</p><table><thead><tr><th align="center">耦合</th><th align="center">解耦</th></tr></thead><tbody><tr><td align="center"><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/%E8%80%A6%E5%90%88.png" alt="耦合"></td><td align="center"><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/%E8%A7%A3%E8%80%A6.png" alt="解耦"></td></tr></tbody></table><h3 id="对三层架构实现解耦"><a href="#对三层架构实现解耦" class="headerlink" title="对三层架构实现解耦"></a>对三层架构实现解耦</h3><ol><li>控制反转:Inversion 0fControl，简称IOC。对象的创建控制权由程序自身转移到外部(容器)，这种思想称为控制反转。</li><li>依赖注入:Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</li><li>Bean对象:IOC容器中创建、管理的对象，称之为Bean。</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><p>控制反转(DI):</p><p>将Dao 及 Service层的实现类，交给IOC容器管理</p><p>为对象加上 @Component 注解：将这个类产生的 Bean 对象交给 IOC 容器管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class EmpController &#123;</span><br><span class="line">    @Qualifier(&quot;empDaoServiceA&quot;) // 默认按类型注入 </span><br><span class="line">//    @Resource(name = &quot;empDaoServiceB&quot;) // 按照名称注入</span><br><span class="line">    @Autowired // 依赖注入</span><br><span class="line">    private EmpService empService;</span><br><span class="line">    @RequestMapping(&quot;/listEmp&quot;)</span><br><span class="line">    public Result list() &#123;</span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line">        return Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖注入(IOC):</p><p>为Controller 及 Service注入运行时所依赖的对象。</p><p>为对象运行时所依赖的成员变量资源加上 @Autowired 注解：应用程序运行时，会自动的查询该类型的Bean对象，并赋值给该成员变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class EmpDaoServiceA implements EmpService&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmpDao empDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; listEmp() &#123;</span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line">        // 2.对数据进行转化 gender job</span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            emp.setGender(emp.getGender().equals(&quot;1&quot;) ? &quot;男&quot; : &quot;女&quot;);</span><br><span class="line"></span><br><span class="line">            switch (emp.getJob()) &#123;</span><br><span class="line">                case &quot;1&quot;:</span><br><span class="line">                    emp.setJob(&quot;讲师&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;2&quot;:</span><br><span class="line">                    emp.setJob(&quot;班主任&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;3&quot;:</span><br><span class="line">                    emp.setJob(&quot;就业指导&quot;);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Repository(&quot;DaoA&quot;)</span><br><span class="line">public class EmpDaoA implements EmpDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; listEmp() &#123;</span><br><span class="line">        // 1. 加载、解析emp.xml文件</span><br><span class="line">        String filePath = this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(filePath, Emp.class);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总结：</p><ol><li>Controller 接收请求后向 Service 发起请求，Service 接收请求后向 Dao 请求数据</li><li>Dao 解析数据后，返回给 Service，Service 接收数据后对数据进行处理并返回给 Controller </li><li>所以要对 Dao 和 Service <code>控制反转</code>，要对 Controller 和 Service <code>依赖注入</code></li></ol><h2 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h2><h3 id="Bean依赖注入的衍生注解"><a href="#Bean依赖注入的衍生注解" class="headerlink" title="Bean依赖注入的衍生注解"></a>Bean依赖注入的衍生注解</h3><p><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/Bean%E6%B3%A8%E8%A7%A3.png" alt="Bean注解"></p><p>从上到下分别为：</p><p>​其他 Bean、Controller Bean、 Service Bean、 Dao Bean</p><p>开发中除了声明控制器只能用@Cotroller，其他的并不强制要求对应的Bean写对应的注释，不过为了规范，还是有必要的。</p><p>@Repository 中实际上已经继承了 @Component 注解</p><p>​<img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/Repository.png" alt="Repository"></p><p>其他同理</p><p>​<img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/Service.png" alt="Service"></p><p>​<img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/RestController.png" alt="RestController"></p><p>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描。</p><p>该注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 </p><p><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/SpringBootApplication.png" alt="SpringBootApplication"></p><p><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/SpringBootApplication.png" alt="SpringBootApplication"></p><p>@SpringBootApplication 中，默认扫描的范围是启动类所在包及其子包</p><h3 id="Autowired依赖注入"><a href="#Autowired依赖注入" class="headerlink" title="Autowired依赖注入"></a>Autowired依赖注入</h3><p>基于@Autowired进行依赖注入的常见方式有如下三种：</p><ol><li><p>属性注入</p><p>优点:代码简洁、方便快速开发。</p><p>缺点:隐藏了类之间的依赖关系、可能会破坏类的封装性</p></li></ol><p><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5.png" alt="属性注入"></p><ol start="2"><li><p>构造器注入</p><p>可以不写无参构造器。如果当前类中只存在一个构造函数，还可以省略@Autowired 注解</p><p>优点:能清晰地看到类的依赖关系、提高了代码的安全性。</p><p>缺点:代码繁琐、如果构造参数过多，可能会导致构造函数臃肿。</p><p>注意:如果只有一个构造函数，@Autowired注解可以省略。</p></li></ol><p><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5.png" alt="构造器注入"></p><ol start="3"><li><p>setter注入</p><p>优点:保持了类的封装性，依赖关系更清晰。<br>缺点:需要额外编写setter方法，增加了代码量。</p></li></ol><p><img src="/images/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/setter%E6%B3%A8%E5%85%A5.png" alt="setter注入"></p><h3 id="Autowired-衍生"><a href="#Autowired-衍生" class="headerlink" title="@Autowired 衍生"></a>@Autowired 衍生</h3><p>@Autowired注解，默认是按照类型进行注入的<br>如果存在多个相同类型的bean，将会报错</p><p>解决方法：</p><ol><li>使用@Primary</li></ol><ul><li>这个注解用于指定当有多个相同类型的bean时，哪一个bean应该被优先考虑。当你通过类型来自动装配（autowire）一个bean时，如果有多个候选者，Spring容器会根据@Primary注解来决定使用哪一个。如果没有指定@Primary，Spring容器可能会抛出异常，因为它不知道应该选择哪一个。</li><li>例如，如果你有两个实现了相同接口的bean，你可以在一个bean上使用@Primary，这样当通过接口类型注入时，就会使用这个被标记为@Primary的bean。</li></ul><ol start="2"><li>搭配@Qualifier使用 @Autowired + @Qualifier</li></ol><ul><li>当你想要精确控制Spring容器应该注入哪一个bean时，可以使用@Qualifier注解。它通常与@Autowired注解一起使用，用于消除歧义，当你有多个相同类型的bean时，@Qualifier注解允许你指定注入哪一个具体的bean。</li><li>例如，如果你有两个名为”dataSource”的bean，你可以在注入时使用@Qualifier(“dataSource1”)来指定注入哪一个。</li></ul><ol start="3"><li>使用@Resource</li></ol><ul><li>@Resource注解是由Java EE提供的，它也可以用来注入bean，但与@Autowired不同，@Resource注解既可以根据类型注入，也可以根据名称注入。当没有指定name属性时，它会尝试根据字段名或setter方法的参数名来匹配bean。</li><li>@Resource注解有一个name属性，你可以指定一个bean的名称来注入特定的bean。如果没有指定name属性，它会根据字段名或setter方法的参数名来注入匹配的bean。</li><li>例如，如果你有一个名为”dataSource”的bean，你可以在需要注入的地方使用@Resource(name&#x3D;”dataSource”)来指定注入这个bean。</li></ul><p>@Resource 与 @Autowired 的区别：</p><ol><li>@Autowired是Spring框架提供的注解，而@Resource是JavaEE规范提供的</li><li>@Autowired默认是按照类型注入，而Resource默认是按照名称注入</li></ol>]]></content>
    
    
    <summary type="html">SpringBoot中对三层架构进行分层与解耦</summary>
    
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/"/>
    
    <category term="开发工具" scheme="https://lathezero.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="框架" scheme="https://lathezero.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://lathezero.github.io/tags/Java/"/>
    
    <category term="后端开发" scheme="https://lathezero.github.io/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="SpringBoot" scheme="https://lathezero.github.io/tags/SpringBoot/"/>
    
    <category term="分层解耦" scheme="https://lathezero.github.io/tags/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 写作指南</title>
    <link href="https://lathezero.github.io/2024/12/28/reference/markdown-guide/"/>
    <id>https://lathezero.github.io/2024/12/28/reference/markdown-guide/</id>
    <published>2024-12-28T00:00:00.000Z</published>
    <updated>2024-12-29T08:26:52.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-写作指南"><a href="#Markdown-写作指南" class="headerlink" title="Markdown 写作指南"></a>Markdown 写作指南</h1><h2 id="文章头部格式-Frontmatter"><a href="#文章头部格式-Frontmatter" class="headerlink" title="文章头部格式 (Frontmatter)"></a>文章头部格式 (Frontmatter)</h2><p>每篇文章都需要包含以下头部信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: &#x27;2024-12-28&#x27;  # 日期格式：YYYY-MM-DD</span><br><span class="line">author: 作者名</span><br><span class="line">excerpt: 文章摘要，会显示在列表页...</span><br><span class="line">tags: [&#x27;标签1&#x27;, &#x27;标签2&#x27;, &#x27;标签3&#x27;]</span><br><span class="line"><span class="section">readTime: 5  # 预计阅读时间（分钟）</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="代码块语法高亮"><a href="#代码块语法高亮" class="headerlink" title="代码块语法高亮"></a>代码块语法高亮</h2><h3 id="常用编程语言"><a href="#常用编程语言" class="headerlink" title="常用编程语言"></a>常用编程语言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- XML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YAML</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bash</span></span><br><span class="line">npm install react</span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerShell</span></span><br><span class="line"><span class="built_in">Set-Location</span> C:\Projects</span><br></pre></td></tr></table></figure><h3 id="其他格式"><a href="#其他格式" class="headerlink" title="其他格式"></a>其他格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纯文本内容，不需要语法高亮</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- 这行会显示为红色（删除）</span></span><br><span class="line"><span class="addition">+ 这行会显示为绿色（添加）</span></span><br></pre></td></tr></table></figure><h2 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p><strong>粗体文本</strong><br><em>斜体文本</em><br><del>删除线文本</del><br><code>行内代码</code></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表：</p><ul><li>项目 1</li><li>项目 2<ul><li>子项目 2.1</li><li>子项目 2.2</li></ul></li></ul><p>有序列表：</p><ol><li>第一步</li><li>第二步<ol><li>子步骤 2.1</li><li>子步骤 2.2</li></ol></li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>这是一段引用文本<br>可以有多行</p></blockquote><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>列1</th><th>列2</th><th>列3</th></tr></thead><tbody><tr><td>内容1</td><td>内容2</td><td>内容3</td></tr><tr><td>内容4</td><td>内容5</td><td>内容6</td></tr></tbody></table><h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><p><a href="https://example.com/">链接文本</a></p><p><img src="/images/markdown-guide/example.gif" alt="图片描述"></p><h2 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h2><p>建议的文件组织结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">  └── posts/</span><br><span class="line">      ├── 2024/</span><br><span class="line">      │   ├── article1.md</span><br><span class="line">      │   └── article2.md</span><br><span class="line">      ├── 2025/</span><br><span class="line">      │   └── article3.md</span><br><span class="line">      └── reference/</span><br><span class="line">          └── markdown-guide.md</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>确保每个代码块都指定了正确的语言</li><li>图片路径使用相对路径，从当前文件位置开始</li><li>保持文件名全小写，使用连字符分隔</li><li>标签使用有意义的关键词</li><li>合理估计阅读时间</li></ol><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p>图片不显示</p><ul><li>检查图片路径是否正确</li><li>确保图片文件存在</li><li>使用正斜杠(&#x2F;)而不是反斜杠()</li></ul></li><li><p>代码高亮失效</p><ul><li>检查语言标识是否正确</li><li>确保代码块使用三个反引号</li><li>语言标识要小写</li></ul></li><li><p>格式混乱</p><ul><li>检查 frontmatter 格式</li><li>确保使用正确的缩进</li><li>保持一致的换行风格</li></ul></li></ol>]]></content>
    
    
    <summary type="html">这是一个完整的 Markdown 写作指南，包含代码高亮、格式化等常用功能的示例...</summary>
    
    
    
    
    <category term="Markdown" scheme="https://lathezero.github.io/tags/Markdown/"/>
    
    <category term="写作指南" scheme="https://lathezero.github.io/tags/%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    
    <category term="参考文档" scheme="https://lathezero.github.io/tags/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 基础教程</title>
    <link href="https://lathezero.github.io/2024/12/23/2024/MySQL/"/>
    <id>https://lathezero.github.io/2024/12/23/2024/MySQL/</id>
    <published>2024-12-23T00:00:00.000Z</published>
    <updated>2024-12-29T08:47:46.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDL数据库定义语言"><a href="#DDL数据库定义语言" class="headerlink" title="DDL数据库定义语言"></a>DDL数据库定义语言</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h4 id="操作语法"><a href="#操作语法" class="headerlink" title="操作语法"></a>操作语法</h4><ol><li><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure></li><li><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure></li><li><p>使用&#x2F;切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 [<span class="keyword">default</span> charset utf8mb4];</span><br></pre></td></tr></table></figure><p>MySQL8.0 版本及以上字符集默认为 utf8mb4</p></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [if existe] 数据库名;</span><br></pre></td></tr></table></figure></li></ol><h4 id="以上的-database-均可替换成-plaintext-schema-如-sql-creat-schema-database-db01"><a href="#以上的-database-均可替换成-plaintext-schema-如-sql-creat-schema-database-db01" class="headerlink" title="以上的 database 均可替换成 plaintext schema 如: sql creat schema database db01;"></a>以上的 database 均可替换成 <code>plaintext schema</code> 如: <code>sql creat schema database db01;</code></h4><p>注：在 show 语句中把 databases 替换成 schemas 需要加 s 作为复数形式</p><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">creat <span class="keyword">table</span> tablename (</span><br><span class="line">字段<span class="number">1</span> 字段类型 [约束] [comment 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 字段类型 [约束] [comment 字段<span class="number">2</span>注释]</span><br><span class="line">)[comment 表注释];</span><br></pre></td></tr></table></figure><p>约束：非空约束<code>plaintext not null</code></p><p>唯一约束<code>plaintext unique</code></p><p>主键约束<code>plaintext primary key</code></p><p>默认约束<code>plaintext default</code></p><p>外健约束<code>plaintext foreign key</code></p><h4 id="查询、修改、删除"><a href="#查询、修改、删除" class="headerlink" title="查询、修改、删除"></a>查询、修改、删除</h4><ol><li><p>查询当前数据库所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>查询建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create table</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">add</span> 字段名 类型 [约束] [注释];</span><br></pre></td></tr></table></figure></li><li><p>修改字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 modify 字段名 类型 [注释];</span><br></pre></td></tr></table></figure></li><li><p>修改字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 change 字段名 新字段名 类型 [注释];</span><br></pre></td></tr></table></figure></li><li><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 字段名;</span><br></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li></ol><h1 id="DML-数据库操作语言-增删改"><a href="#DML-数据库操作语言-增删改" class="headerlink" title="DML 数据库操作语言 增删改"></a>DML 数据库操作语言 增删改</h1><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ol><li><p>指定字段添加数据 *</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 (字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">values</span> (值<span class="number">1</span>，值<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>，值<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>指定字段批量添加数据 *</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 (字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">values</span> (值<span class="number">1</span>，值<span class="number">2</span>), (值<span class="number">1</span>，值<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>全部字段批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>，值<span class="number">2</span>), (值<span class="number">1</span>，值<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="updata"><a href="#updata" class="headerlink" title="updata"></a>updata</h3><ol><li><p>修改单个数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updata 表名 <span class="keyword">set</span> 字段 <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>, 字段 <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span> [<span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>];</span><br></pre></td></tr></table></figure></li><li><p>修改全部数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updata 表名 <span class="keyword">set</span> 字段 <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>, 字段 <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="dalete"><a href="#dalete" class="headerlink" title="dalete"></a>dalete</h3><ol><li><p>删除单条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除全部数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li></ol><h1 id="DQl"><a href="#DQl" class="headerlink" title="DQl"></a>DQl</h1><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><ol><li><p>查询多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>查询所有字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>为查询字段设置别名，as 关键字可以省略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [<span class="keyword">as</span> 别名<span class="number">1</span>]，字段<span class="number">2</span>[<span class="keyword">as</span> 别名<span class="number">2</span>] <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li></ol><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ol><li><p>count</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(字段) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(字段) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(字段) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(字段) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件列表] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> data <span class="operator">&lt;=</span> <span class="string">&#x27;2015-01-01&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> job havin <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>where 和 havin 的区别：</p><ol><li>执行时机不同 (where -&gt; group by -&gt; having)</li><li>判断条件不同 (having 后可以用聚合函数，where 不可以)</li></ol><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件列表] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 <span class="keyword">having</span> 分组后过滤条件] <span class="keyword">order</span> <span class="keyword">by</span> 排序字段 排序方式</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entry_date <span class="keyword">asc</span>, update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>升序：asc （默认） 降序：desc</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selece 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段 <span class="keyword">having</span> 过滤条件] [<span class="keyword">order</span> <span class="keyword">by</span> 排序字段] limit 起始索引, 查询记录数;</span><br></pre></td></tr></table></figure><p>起始索引为 0 时可以省略</p>]]></content>
    
    
    <summary type="html">MySQL 是最流行的关系型数据库之一，本文将介绍其基本概念和常用命令...</summary>
    
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据库" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    <category term="教程指南" scheme="https://lathezero.github.io/categories/%E6%95%99%E7%A8%8B%E6%8C%87%E5%8D%97/"/>
    
    <category term="入门教程" scheme="https://lathezero.github.io/categories/%E6%95%99%E7%A8%8B%E6%8C%87%E5%8D%97/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="MySQL" scheme="https://lathezero.github.io/tags/MySQL/"/>
    
    <category term="数据库" scheme="https://lathezero.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>解决 phpstudy 和本地 mysql 不兼容问题</title>
    <link href="https://lathezero.github.io/2024/12/23/2024/mysql_and_phpstudy/"/>
    <id>https://lathezero.github.io/2024/12/23/2024/mysql_and_phpstudy/</id>
    <published>2024-12-23T00:00:00.000Z</published>
    <updated>2024-12-29T10:01:20.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决-phpstudy-和本地-mysql-不兼容问题"><a href="#解决-phpstudy-和本地-mysql-不兼容问题" class="headerlink" title="解决 phpstudy 和本地 mysql 不兼容问题"></a>解决 phpstudy 和本地 mysql 不兼容问题</h1><h2 id="首先正常安装并且初始化-mysql"><a href="#首先正常安装并且初始化-mysql" class="headerlink" title="首先正常安装并且初始化 mysql"></a>首先正常安装并且初始化 mysql</h2><ol><li><h3 id="先删除-mysql-的服务，使用-cmd-管理员模式输入以下指令"><a href="#先删除-mysql-的服务，使用-cmd-管理员模式输入以下指令" class="headerlink" title="先删除 mysql 的服务，使用 cmd 管理员模式输入以下指令"></a>先删除 mysql 的服务，使用 cmd 管理员模式输入以下指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete mysql</span><br></pre></td></tr></table></figure><p>成功后弹出 “[SC] DeleteService SUCCESS”</p><p>注：若安装 mysql 后没有运行 <code>bash mysqld -install</code>命令，则跳过第一步</p></li><li><h3 id="注册新的-mysql-服务"><a href="#注册新的-mysql-服务" class="headerlink" title="注册新的 mysql 服务"></a>注册新的 mysql 服务</h3><ol><li><p>打开 cmd 管理员模式，导航到 mysql 的 bin 文件目录，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\mysql-9.1.0-winx64\bin</span><br></pre></td></tr></table></figure><p>或者直接打开 bin 文件，然后在上面文件路径中输入 cmd 然后进入到 cmd 界面</p></li><li><p>注册 mysql 服务，并且为服务起一个新名字，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install mysql9</span><br></pre></td></tr></table></figure><p>成功后弹出 “Service successfully installed”</p></li></ol></li><li><h3 id="试运行-mysql"><a href="#试运行-mysql" class="headerlink" title="试运行 mysql"></a>试运行 mysql</h3><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql9</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">解决 phpstudy 和本地 mysql 不兼容问题</summary>
    
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据库" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    <category term="问题解决" scheme="https://lathezero.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    <category term="环境配置" scheme="https://lathezero.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="MySQL" scheme="https://lathezero.github.io/tags/MySQL/"/>
    
    <category term="phpstudy" scheme="https://lathezero.github.io/tags/phpstudy/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发iPhone底部因为横杠适配有问题</title>
    <link href="https://lathezero.github.io/2024/12/22/2024/wechat-miniapp/"/>
    <id>https://lathezero.github.io/2024/12/22/2024/wechat-miniapp/</id>
    <published>2024-12-22T00:00:00.000Z</published>
    <updated>2024-12-29T10:01:28.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序开发iPhone底部因为横杠适配有问题"><a href="#微信小程序开发iPhone底部因为横杠适配有问题" class="headerlink" title="微信小程序开发iPhone底部因为横杠适配有问题"></a>微信小程序开发iPhone底部因为横杠适配有问题</h1><p>在做一个商城小程序开发的时候遇到的一个问题，有些 iphone 手机最下边有一个横条，就像这样：</p><p><img src="/images/wechat-miniapp/wechatminiapp.png" alt="wechatminiapp"></p><p>当我们正常开发的时候就会变成：</p><p><img src="/images/wechat-miniapp/wechatminiapp2.png" alt="wechatminiapp2"></p><p>如果加一条 margin-bottom 适配就变得没问题了，但是如果在没有这条横杠的手机上就会变得很奇怪：</p><p><img src="/images/wechat-miniapp/wechatminiapp3.png" alt="wechatminiapp3"></p><p>解决办法：</p><p>​增加一条 css 样式 <code>padding-bottom: env(safe-area-inset-bottom);</code></p><p>​这用于设置元素的底部内边距。这里的<code>env()</code>函数是一个CSS环境变量函数，它允许你根据设备的特定环境特性来设置样式值。</p><p><code>safe-area-inset-bottom</code>是一个特定的环境变量，它返回的是设备屏幕底部安全区域的内边距值。安全区域是指在屏幕边缘（如刘海、圆角、传感器等）不会遮挡内容的区域。在一些设备上，尤其是带有刘海或圆角的手机屏幕上，内容可能会被这些屏幕特征遮挡，因此开发者需要避免在这些区域放置重要内容。</p><p>使用<code>env(safe-area-inset-bottom)</code>的好处是，它能够自动适应不同设备的屏幕形状和尺寸，确保内容不会被遮挡。这样，开发者就不需要硬编码一个固定的值，而是可以动态地根据设备的安全区域来调整布局。</p><p>简而言之，<code>padding-bottom: env(safe-area-inset-bottom);</code> 意味着元素的底部内边距将等于设备底部安全区域的内边距，从而确保内容不会被屏幕底部的任何遮挡物（如刘海）遮挡。</p>]]></content>
    
    
    <summary type="html">微信小程序开发iPhone底部因为横杠适配问题解决</summary>
    
    
    
    <category term="前端开发" scheme="https://lathezero.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="微信小程序" scheme="https://lathezero.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="问题解决" scheme="https://lathezero.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    <category term="UI适配" scheme="https://lathezero.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/UI%E9%80%82%E9%85%8D/"/>
    
    
    <category term="微信小程序" scheme="https://lathezero.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="前端开发" scheme="https://lathezero.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Maven 配置与创建</title>
    <link href="https://lathezero.github.io/2024/12/16/2024/maven/"/>
    <id>https://lathezero.github.io/2024/12/16/2024/maven/</id>
    <published>2024-12-16T00:00:00.000Z</published>
    <updated>2025-01-02T11:53:39.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven-配置与创建"><a href="#Maven-配置与创建" class="headerlink" title="Maven 配置与创建"></a>Maven 配置与创建</h1><h2 id="配置Maven文件："><a href="#配置Maven文件：" class="headerlink" title="配置Maven文件："></a>配置Maven文件：</h2><p>下载maven bin-zip文件，解压。</p><h3 id="官网："><a href="#官网：" class="headerlink" title="官网："></a>官网：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://maven.apache.org/</span><br></pre></td></tr></table></figure><ol><li>修改conf&#x2F;settings.xml 中的 <localRepository>(大概第53行) 标签内容为maven包路径位置，例：</localRepository></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\apache-maven-3.9.9\<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置阿里云私服：修改conf&#x2F;settings.xml 中的 <mirrors> 标签内容，添加如下内容：</mirrors></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置环境变量：复制maven包下的bin地址，添加到path环境变量</li></ol><h2 id="在idea中配置maven："><a href="#在idea中配置maven：" class="headerlink" title="在idea中配置maven："></a>在idea中配置maven：</h2><ol><li><p>打开 idea &#x3D;&gt; File | Settings | Build, Execution, Deployment | Build Tools | Maven</p></li><li><p>Maven home path: 选择 maven 包路径，例：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\apache-maven-3.9.9\</span><br></pre></td></tr></table></figure><ol start="3"><li>User settings file: 选择 maven 包中的conf&#x2F;settings.xml,例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\apache-maven-3.9.9\conf\settings.xml</span><br></pre></td></tr></table></figure><ol start="4"><li>把User settings file 和 Local repository 勾选上，点击 Apply 和 OK</li></ol><h2 id="创建maven项目："><a href="#创建maven项目：" class="headerlink" title="创建maven项目："></a>创建maven项目：</h2><ol><li>创建一个空项目</li><li>点击右上角齿轮 &#x3D;&gt; Projext Structure</li><li>SDK：选择你的 jdk</li></ol><h2 id="创建maven模块："><a href="#创建maven模块：" class="headerlink" title="创建maven模块："></a>创建maven模块：</h2><p>同上</p><ol><li>新建项目，选择Maven Archetype，Name、Location随意</li><li>Archetype 选择 quickstart</li><li>下面Advanced Settings：<ol><li>Groupld：组织名称</li><li>Artifactld：模块名称</li></ol></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="/images/maven/mavenuse.png" alt="mavenuse"></p>]]></content>
    
    
    <summary type="html">Maven 基础配置与创建</summary>
    
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/"/>
    
    <category term="开发工具" scheme="https://lathezero.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="构建工具" scheme="https://lathezero.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Maven" scheme="https://lathezero.github.io/tags/Maven/"/>
    
    <category term="Java" scheme="https://lathezero.github.io/tags/Java/"/>
    
    <category term="后端开发" scheme="https://lathezero.github.io/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="项目管理" scheme="https://lathezero.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java 实现各排序算法</title>
    <link href="https://lathezero.github.io/2024/09/28/2024/sortAlgorithm/"/>
    <id>https://lathezero.github.io/2024/09/28/2024/sortAlgorithm/</id>
    <published>2024-09-27T16:00:00.000Z</published>
    <updated>2024-12-31T00:37:07.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>​        当有一次循环没有进行交换时，则已经有序，直接打破。</p><h1 id="冒泡排序-1"><a href="#冒泡排序-1" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void maopao(int[] arr) &#123;</span><br><span class="line">        for (int i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">            boolean flag = true;</span><br><span class="line">            for (int j = 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">                if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    flag = false;</span><br><span class="line">                    int temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + 1];</span><br><span class="line">                    arr[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>​        每次找出最小值和最大值进行左右交换，当最小值和最大值索引相同时，应更新最大值索引（先交换最小值时）</p><h1 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public static void xuanze(int[] arr) &#123;</span><br><span class="line">        for (int i = 0; i &lt; arr.length / 2; i++) &#123;</span><br><span class="line">            int min = arr[i];</span><br><span class="line">            int minIndex = i;</span><br><span class="line">            int max = arr[i];</span><br><span class="line">            int maxIndex = i;</span><br><span class="line">            int len = arr.length - 1 - i;</span><br><span class="line"></span><br><span class="line">            for (int j = i + 1; j &lt;= len; j++) &#123;</span><br><span class="line">                if (min &gt; arr[j]) &#123;</span><br><span class="line">                    min = arr[j];</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">                if (max &lt; arr[j]) &#123;</span><br><span class="line">                    max = arr[j];</span><br><span class="line">                    maxIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (minIndex != i) &#123;</span><br><span class="line">                arr[minIndex] = arr[i];</span><br><span class="line">                arr[i] = min;</span><br><span class="line">                if (maxIndex == i) &#123;</span><br><span class="line">                    maxIndex = minIndex; //如果最大值和最小值互换，则最大值下标也要互换</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (maxIndex != len) &#123;</span><br><span class="line">                arr[maxIndex] = arr[len];</span><br><span class="line">                arr[len] = max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>​        从1开始，到len - 1。</p><h1 id="插入排序-1"><a href="#插入排序-1" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void charu(int[] arr) &#123;</span><br><span class="line">        for (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            int insertIndex = i;</span><br><span class="line">            int insertValue = arr[i];</span><br><span class="line">            while (insertIndex &gt; 0 &amp;&amp; insertValue &lt; arr[insertIndex - 1]) &#123;</span><br><span class="line">                arr[insertIndex] = arr[insertIndex - 1];</span><br><span class="line">                insertIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[insertIndex] = insertValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>​        插入式间隔为gap的插入式排序            gap一般为数组元素个数的二分之一</p><ol><li>创建一个gap循环体，每循环一次gap &#x2F;&#x3D; 2。</li><li>在gap循环体内创建一个步长为gap的循环体，循环gap到arr.length的元素。</li><li>与insertIndex - gap比较，选择是否插入。</li></ol><h1 id="希尔排序-1"><a href="#希尔排序-1" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void xier(int[] arr) &#123;</span><br><span class="line">        for (int gap = arr.length / 2; gap &gt; 0; gap /= 2) &#123;</span><br><span class="line">            for (int i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                int insertIndex = i;</span><br><span class="line">                int insertValue = arr[i];</span><br><span class="line">                while (insertIndex - gap &gt;= 0 &amp;&amp; insertValue &lt; arr[insertIndex - gap]) &#123;</span><br><span class="line">                    arr[insertIndex] = arr[insertIndex - gap];</span><br><span class="line">                    insertIndex -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[insertIndex] = insertValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>​        定义一个基准值和左右指针，把小于基准值的放左边，大于基准值的放右边</p><h1 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void quickSort(int[] arr, int left, int right) &#123;</span><br><span class="line">        int l = left, r = right;</span><br><span class="line">        if (left &gt;= right) &#123;return;&#125;</span><br><span class="line">        while (l &lt; r) &#123;</span><br><span class="line">            while (l &lt; r &amp;&amp; arr[r] &gt;= arr[left]) r--;</span><br><span class="line">            while (l &lt; r &amp;&amp; arr[l] &lt;= arr[left]) l++;</span><br><span class="line">            if (l &lt; r) &#123;</span><br><span class="line">                swap(arr, l, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;swap(arr, left, l);</span><br><span class="line">        quickSort(arr, left, l -1);</span><br><span class="line">        quickSort(arr, r + 1, right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h1 id="归并排序-1"><a href="#归并排序-1" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static void mergeSort(int[] arr, int left, int right , int[] temp) &#123;</span><br><span class="line">        if (left &lt; right) &#123;</span><br><span class="line">            int mid = ((left + right) / 2);</span><br><span class="line">            mergeSort(arr, left, mid, temp);</span><br><span class="line">            mergeSort(arr, mid + 1, right, temp);</span><br><span class="line">            merge(arr, left, mid, right, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void merge(int[] arr, int left, int mid, int right, int[] temp) &#123;</span><br><span class="line">        int i = left, j = mid + 1, t = 0;</span><br><span class="line">        while (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">            if (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                temp[t] = arr[i];</span><br><span class="line">                t++; i++;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                temp[t] = arr[j];</span><br><span class="line">                t++; j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while (i &lt;= mid) &#123;</span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t++; i++;</span><br><span class="line">        &#125;</span><br><span class="line">        while (j &lt;= right) &#123;</span><br><span class="line">            temp[t] = arr[j];</span><br><span class="line">            t++; j++;</span><br><span class="line">        &#125;</span><br><span class="line">        int leftIndex = left;</span><br><span class="line">        t = 0;</span><br><span class="line">        while (leftIndex &lt;= right) &#123;</span><br><span class="line">            arr[leftIndex] = temp[t];</span><br><span class="line">            leftIndex++; t++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><ol><li>创建一个二维数组（桶），存储桶的个数和每个桶可存储的元素的个数。</li><li>创建一个数组用来记录每个桶存储的元素的个数。</li><li>遍历数组，找出最大的数，计算出它的位数有几位。</li><li>写一个循环次数为‘位数’的循环体，然后遍历数组，把元素放进对应的桶里。</li><li>把桶里的元素放回原数组，并清空该桶的元素。</li></ol><h1 id="基数排序-1"><a href="#基数排序-1" class="headerlink" title="基数排序"></a>基数排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void radixSort(int[] arr) &#123;</span><br><span class="line">        int[][] bucket = new int[10][arr.length];</span><br><span class="line">        int[] bucketElementcounts = new int[10];</span><br><span class="line">        int max = arr[0];</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            if (max &lt; arr[i]) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int maxLength = (max + &quot;&quot;).length();</span><br><span class="line">        for (int i = 0; i &lt; maxLength; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">                int value = arr[j] / (int) Math.pow(10, i) % 10;</span><br><span class="line">                bucket[value][bucketElementcounts[value]] = arr[j];</span><br><span class="line">                bucketElementcounts[value]++;</span><br><span class="line">            &#125;</span><br><span class="line">            int index = 0;</span><br><span class="line">            for (int k = 0; k &lt; bucket.length; k++) &#123;</span><br><span class="line">                if (bucketElementcounts[k] != 0) &#123;</span><br><span class="line">                    for (int j = 0; j &lt; bucketElementcounts[k]; j++) &#123;</span><br><span class="line">                        arr[index++] = bucket[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                bucketElementcounts[k] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>​        完全二叉树，最大堆</p><ol><li>heapSort：从最后一个父节点开始，向根节点进行元素下沉(heapify)<ol><li>从根目录开始循环，每次heapify都把第一个元素和最后一个元素交换，并且长度减一(每次隔离最大值元素)</li></ol></li><li>heapify：判断是否存在两个子节点，若存在两个子节点则判断左子节点是否大于右子节点。<ol><li>从传入的父节点开始，依次元素下沉，</li></ol></li></ol><h1 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void heapSort(int[] arr, int len) &#123;</span><br><span class="line">        for (int i = (len - 2) / 2; i &gt;= 0; i--) heapify(arr, i, len - 1);</span><br><span class="line">        for (int i = len - 1; i &gt; 0; i--) &#123;</span><br><span class="line">            swap(arr, 0, i);</span><br><span class="line">            heapify(arr, 0, i - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">public static void heapify(int[] arr, int start, int end) &#123;</span><br><span class="line">    int dad = start, son = dad * 2 + 1;</span><br><span class="line">    if (son &gt; end) return;</span><br><span class="line">    if (son + 1 &lt;= end &amp;&amp; arr[son] &lt; arr[son + 1]) son++;</span><br><span class="line">    if (arr[dad] &gt; arr[son]) return;</span><br><span class="line">    swap(arr, dad, son);</span><br><span class="line">    heapify(arr, son, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><h1 id="计数排序-1"><a href="#计数排序-1" class="headerlink" title="计数排序"></a>计数排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void countSort(int[] arr) &#123;</span><br><span class="line">        int max = arr[0], min = arr[0];</span><br><span class="line"></span><br><span class="line">        //找出最大值和最小值</span><br><span class="line">        for (int i = 0; i&lt; arr.length; i++) &#123;</span><br><span class="line">            if (max &lt; arr[i]) max = arr[i];</span><br><span class="line">            if (min &gt; arr[i]) min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        //初始化计数数组</span><br><span class="line">        int[] temparr = new int[max - min + 1];</span><br><span class="line">        for (int i = 0; i &lt; temparr.length; i++) &#123;</span><br><span class="line">            temparr[i] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        //开始计数</span><br><span class="line">        for (int i = 0 ; i &lt; arr.length; i++) &#123;</span><br><span class="line">            temparr[arr[i] - min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        int t = 0;</span><br><span class="line">        for (int i = 0; i &lt; temparr.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; temparr[i]; j++) &#123;</span><br><span class="line">                arr[t++] = i + min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;count = 1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">排序算法</summary>
    
    
    
    <category term="后端开发" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="算法" scheme="https://lathezero.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://lathezero.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://lathezero.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
